/**
 * Program Name: WorldCitiesController.java
 * Purpose: This is a controller part of the WorldCities Practice Application.
 * 					It takes 2 inputs from user(country name, min population).
 * 					NOTE: requires MySQL and the World database.
 * Date: Aug 2, 2018
 */

import javax.swing.*;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;




public class Z_A_ControllerV4 extends JFrame
{
	//CLASS WIDE SCOPE
	// listener related components
	private JTextField country = new JTextField(20);
	private JTextField minPopulation = new JTextField(20);
	private JButton executeBtn = new JButton("Execute Query");
	
	// standard boilerplate code often seen in JDBC apps
	Connection myConn = null;
	Statement myStmt = null;
	ResultSet myRslt = null;
	
	// PreparedStatement object and strings for connection
	PreparedStatement myPrepStmt = null;
	String URL = "jdbc:mysql://localhost:3306/sakila?useSSL=false";
	String user = "root";
	String password = "password";

	// viewer
	WorldCitiesViewer viewer;
	
	//CONSTRUCTOR
	public Z_A_ControllerV4() throws HeadlessException
	{
		// courtsey call
		super("Bill Pulling's World Cities Controller GUI");
		
		// boilerplate
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setLayout(new GridLayout(3,1,10,10));
		this.setSize(500, 200);
		this.setLocationRelativeTo(null);
		
		// create panels and add components
		JPanel panel1 = new JPanel(new GridLayout(1,2,10,10));
		panel1.add(new JLabel("Enter name of country here >"));
		panel1.add(country);
		JPanel panel2 = new JPanel(new GridLayout(1,2,10,10));
		panel2.add(new JLabel("Enter minimum population for city here >"));
		panel2.add(minPopulation);
		JPanel panel3 = new JPanel(new FlowLayout());
		panel3.add(executeBtn);
		
		// REGISTER THE LISTENER
		Listener listener = new Listener();
		executeBtn.addActionListener(listener);
		
		// add panels to the JFrame
		this.add(panel1);
		this.add(panel2);
		this.add(panel3);
		
		//last line
		this.setVisible(true);
	}
	
	// inner class ActionListener
	private class Listener implements ActionListener
	{
		@Override
		public void actionPerformed(ActionEvent ev)
		{
			// When "Execute Query" button is clicked
			if(ev.getActionCommand().equals("Execute Query")) 
			{
				// ensure both country and min population are entered
				if(country.getText().length() > 0 && minPopulation.getText().length() > 0)
				{
					//if we have good input, then try to make the DB connection
					try
					{
						// create a Connection object by passing in the appropriate database URL, username, and password as String arguments
						myConn = DriverManager.getConnection(URL, user, password);
						
						myPrepStmt = myConn.prepareStatement(
							    "SELECT fil.title, " +
							    "category.name, " +
							    "film.rating " + 
							    "film.description " + 
							    "FROM film INNER JOIN fil_category ON film.film_id = film_category.film_id " + 
							    "FROM city INNER JOIN country ON city.CountryCode = country.code " + // <-- add space here
							    "WHERE country.name = ? AND city.population > ?"
							);
						
						// fill in the parameters from the text fields
						myPrepStmt.setString(1, country.getText());
						myPrepStmt.setInt(2, Integer.parseInt(minPopulation.getText()));
						
						// RUN the query and assign the returned ResultSet object to myRslt
						myRslt = myPrepStmt.executeQuery();
						
						// call the DbUtils method resultSetToTableModel() and catch the returned TableModel object
						TableModel model = DbUtils.resultSetToTableModel(myRslt);
						
						// pass the TableModel object to the JTableView 
						if(viewer == null)
							viewer = new WorldCitiesViewer(model);
						else
							viewer.table.setModel(model);
						
						
					}
					catch(SQLException ex)
					{
						System.out.println("SQLException caught, message is: " + ex.getMessage());
						ex.printStackTrace();
					}
					catch(NumberFormatException ex)
					{
						System.out.println("Number format exception, message is " + ex.getMessage());
						ex.printStackTrace();
						JOptionPane.showMessageDialog(null, "Enter numeric values for min population");
					}
					catch(Exception ex)
					{
						System.out.println("Exception message is " + ex.getMessage());
						ex.printStackTrace();
					}
					finally
					{
						try
							{
								// closing
								if(myRslt != null)
									myRslt.close();
								if(myStmt != null)
									myStmt.close();
								if(myConn != null)
									myConn.close();
							}//end try
						catch(SQLException ex)
						{
							ex.printStackTrace();
						}
					}//end finally
				}
				else
				{
					// If country is not typed
					if(country.getText().length() <= 0)
					{
						JOptionPane.showMessageDialog(null, "Please input country name.");
						country.requestFocus();
					}
					// If min population is not typed
					else if(minPopulation.getText().length() <= 0)
					{
						JOptionPane.showMessageDialog(null, "Please input minimum population.");
						minPopulation.requestFocus();
					}
				}
			}
			
		} // end of actionPerformed
	} // end of Listener

	public static void main(String[] args)
	{
		new Z_A_ControllerV4();
	}

}
